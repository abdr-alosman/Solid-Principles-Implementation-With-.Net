1- What is the Single Responsibility Principle in C#?
The Single Responsibility Principle in C# states that “Each software module or class should have only one reason to 
change“. In other words, we can say that each module or class should have only one responsibility to do.

2- How can we achieve the Single Responsibility Principle in C#?
Let us understand the need for the Single Responsibility Principle in C# with an example. Suppose we need to design 
an Invoice class. As we know an Invoice class basically used to calculate various amounts based on its data. The Invoice
class does not know how to retrieve the data, or how to format the data for display, print, logging, or sending an email,etc. 

If we write the database logic, business logic as well as display logic in a single class, then our class performing multiple responsibilities. Then it becomes very difficult to change one responsibility without breaking the other responsibilities. So, by mixing multiple responsibilities into a single class, we are getting the following disadvantage,

Difficult to understand
Difficult to test
Chance of duplicating the logic of other parts of the application